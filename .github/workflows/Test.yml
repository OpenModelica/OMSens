name: Test-Build-Publish

on:
  push:
    branches: ['master']
    tags:
      - 'v*'   # only publish when pushing version tags (e.g., v1.0.0)
  pull_request:
  workflow_dispatch:

jobs:
  Test-Build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.12', '3.13']
        os: ['ubuntu-latest', 'windows-latest']
        omc-version: ['stable']

    timeout-minutes: 45
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5

      - name: Set up OpenModelica Compiler
        uses: OpenModelica/setup-openmodelica@v1.0.2
        with:
          version: ${{ matrix.omc-version }}
          packages: omc
          libraries: 'Modelica 3.2.3'

      - run: omc --version

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip build setuptools wheel numpy meson ninja twine
          pip install . pytest pytest-md pytest-emoji

      - name: Run pytest
        uses: pavelzw/pytest-action@v2
        with:
          verbose: true
          emoji: true
          job-summary: true
          custom-arguments: '-v'
          click-to-expand: true
          report-title: 'Test Report'

      - name: Build wheel
        run: python -m build --wheel --outdir wheels

      - name: Check twine
        run: python -m twine check wheels/*

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.python-version }}
          path: wheels/*

  Publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: Test-Build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download Ubuntu wheel artifact 3.12
        uses: actions/download-artifact@v5
        with:
          name: wheel-ubuntu-latest-3.12
          path: wheels/ubuntu

      - name: Download Ubuntu wheel artifact 3.13
        uses: actions/download-artifact@v5
        with:
          name: wheel-ubuntu-latest-3.13
          path: wheels/ubuntu

      - name: Download Windows wheel artifact 3.12
        uses: actions/download-artifact@v5
        with:
          name: wheel-windows-latest-3.12
          path: wheels/windows

      - name: Download Windows wheel artifact 3.13
        uses: actions/download-artifact@v5
        with:
          name: wheel-windows-latest-3.13
          path: wheels/windows

      - name: Install twine
        run: python -m pip install --upgrade twine

      - name: Publish all wheels to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_OMSENS_API_TOKEN }}
        run: |
          python -m twine upload wheels/ubuntu/* wheels/windows/* --skip-existing
